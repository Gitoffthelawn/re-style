(function(global) { 'use strict'; define(({ // This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of the MPL was not distributed with this file, You can obtain one at http://mozilla.org/MPL/2.0/.
	'node_modules/web-ext-utils/browser/': { manifest, rootUrl, },
	'node_modules/web-ext-utils/utils/': { reportError, reportSuccess, },
	'node_modules/native-ext/': Native,
	'node_modules/es6lib/functional': { debounce, },
	'common/options': options,
	'../util': { debounceIdle, },
	require,
}) => {
let active = options.chrome.value; options.chrome.onChange(([ value, ]) => { active = value; writeStyles(!value); });

const styles = new Set; let writeCss = null;
const separator = `\n/*"*//*'*/;};};};};};}@media not all {} /*${rootUrl.slice('moz-extension://'.length, -1)}*/ /* reset sequence, do not edit this line */\n`;
// This terminator sequence closes open strings, comments, blocks and declarations.
// The media query seems to "reset" the parser (and doesn't do anything itself).
// At the same time it serves as split point when the changes to the files are applies to the local edit files.
// The rootUrl part makes that sequence unpredictable for the style authors.

class ChromeStyle {
	constructor(path, chrome, content) {
		styles.add(this);
		this.path = path;
		// the sheets are loaded with origin 'user', which means their priority is below 'author' sheets unless they are !important, seee: https://developer.mozilla.org/en-US/docs/Web/CSS/Cascade#Cascading_order
		// that means they are pretty useless unless they are !important ==> add that to all rules
		this.chrome  = (chrome  || '').toString({ minify: false, important: true, namespace: false, }).trim().replace(/\r\n?/g, '\n');
		this.content = (content || '').toString({ minify: false, important: true, namespace: false, }).trim().replace(/\r\n?/g, '\n');
		writeStyles();
	}

	destroy() {
		if (!styles.has(this)) { return; }
		styles.delete(this);
		this.code = null;
		writeStyles();
	}

	toJSON() { return this; }

	static fromJSON({ path, chrome, content, }) {
		// writeStyles(); // this is only used to load styles after a restart. This style should not have changed since it was last written.
		return new ChromeStyle(path, chrome, content);
	}

	static get separator() { return separator; }
}

const writeStyles = debounceIdle(async (clear) => { try {
	if (!active && !clear) { return; }
	writeCss = writeCss || (await Native.require(require.resolve('./native')));
	const sorted = clear ? null : Array.from(styles).sort((a, b) => a.path < b.path ? -1 : 1);

	// TODO: this throws all @namespace declarations into a single file. Is that even supposed to work? Do later (default) declarations overwrite earlier ones?
	// TODO: do @import rules work? Should they?

	const files = { chrome: '', content: '', };
	clear || Object.keys(files).forEach(type => (files[type] =
		`/* Do not edit this file (outside the Browser Toolbox). It is managed by the ${manifest.name} extension. All changes will be overwritten the next time the extension starts! */\n` /*  v${manifest.version} */
		+ sorted.filter(_=>_[type]).map(
			style => `/* ${ style.path } */\n${ style[type] }`
		).join(separator) +'\n'
	));

	const changed = (await writeCss(options.chrome.children.profile.value, clear ? null : files));

	changed && reportSuccess(`The UI styles were changed`, `restart the browser to apply the changes`);
} catch (error) {
	reportError(`Failed to write chrome styles`, error);
} finally { destroy(); } }, 1e3);

const destroy = debounce(() => {
	Native.unref(writeCss); writeCss = null;
}, 60e3);

return ChromeStyle;

}); })(this);
